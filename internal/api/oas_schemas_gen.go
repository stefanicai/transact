// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/CreateTransactionRequest
type CreateTransactionRequest struct {
	Description OptString `json:"description"`
	// Amount of the transaction.
	Amount OptString `json:"amount"`
	Date   OptString `json:"date"`
}

// GetDescription returns the value of Description.
func (s *CreateTransactionRequest) GetDescription() OptString {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *CreateTransactionRequest) GetAmount() OptString {
	return s.Amount
}

// GetDate returns the value of Date.
func (s *CreateTransactionRequest) GetDate() OptString {
	return s.Date
}

// SetDescription sets the value of Description.
func (s *CreateTransactionRequest) SetDescription(val OptString) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *CreateTransactionRequest) SetAmount(val OptString) {
	s.Amount = val
}

// SetDate sets the value of Date.
func (s *CreateTransactionRequest) SetDate(val OptString) {
	s.Date = val
}

// Ref: #/components/schemas/CreateTransactionResponse
type CreateTransactionResponse struct {
	ID OptString `json:"id"`
}

// GetID returns the value of ID.
func (s *CreateTransactionResponse) GetID() OptString {
	return s.ID
}

// SetID sets the value of ID.
func (s *CreateTransactionResponse) SetID(val OptString) {
	s.ID = val
}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/GetTransactionRequest
type GetTransactionRequest struct {
	// Id in uuid format.
	ID      OptString `json:"id"`
	Country OptString `json:"country"`
}

// GetID returns the value of ID.
func (s *GetTransactionRequest) GetID() OptString {
	return s.ID
}

// GetCountry returns the value of Country.
func (s *GetTransactionRequest) GetCountry() OptString {
	return s.Country
}

// SetID sets the value of ID.
func (s *GetTransactionRequest) SetID(val OptString) {
	s.ID = val
}

// SetCountry sets the value of Country.
func (s *GetTransactionRequest) SetCountry(val OptString) {
	s.Country = val
}

// Ref: #/components/schemas/GetTransactionResponse
type GetTransactionResponse struct {
	// Id in uuid format.
	ID          OptString `json:"id"`
	Description OptString `json:"description"`
	// Amount of the transaction in USD.
	AmountUSD OptString   `json:"amountUSD"`
	Date      OptDateTime `json:"date"`
	// Amount in the currency of the specified country.
	Amount OptString `json:"amount"`
}

// GetID returns the value of ID.
func (s *GetTransactionResponse) GetID() OptString {
	return s.ID
}

// GetDescription returns the value of Description.
func (s *GetTransactionResponse) GetDescription() OptString {
	return s.Description
}

// GetAmountUSD returns the value of AmountUSD.
func (s *GetTransactionResponse) GetAmountUSD() OptString {
	return s.AmountUSD
}

// GetDate returns the value of Date.
func (s *GetTransactionResponse) GetDate() OptDateTime {
	return s.Date
}

// GetAmount returns the value of Amount.
func (s *GetTransactionResponse) GetAmount() OptString {
	return s.Amount
}

// SetID sets the value of ID.
func (s *GetTransactionResponse) SetID(val OptString) {
	s.ID = val
}

// SetDescription sets the value of Description.
func (s *GetTransactionResponse) SetDescription(val OptString) {
	s.Description = val
}

// SetAmountUSD sets the value of AmountUSD.
func (s *GetTransactionResponse) SetAmountUSD(val OptString) {
	s.AmountUSD = val
}

// SetDate sets the value of Date.
func (s *GetTransactionResponse) SetDate(val OptDateTime) {
	s.Date = val
}

// SetAmount sets the value of Amount.
func (s *GetTransactionResponse) SetAmount(val OptString) {
	s.Amount = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
